## then we need to find the SCC numbers in our SCC5 table for our primary key
## to be able to match with NEI table
## so subsseting SSC5 to SSC6
SCC6 <- unique(SCC5$SCC) ## our primary key
## from table NEI we are subsetting the columns we will need for our plot's data
## into varaible "NEI16"
NEI16 <- select(NEI, fips, SCC, Emissions, year)
## then we create variable "fips1" for "Baltimore City, Maryland" (fips == "24510")
## and Los Angeles County, California (fips == "06037")
fips1 <- c("24510", "06037")
## then we filter our NEI12 table on our primary key which is "SCC6"
## and variable "fips1", creating variable "NEI17"
NEI17 <- filter(NEI16, SCC %in% SCC6, fips %in% fips1)
## for our plot we need to group by "year", "fips" and sum by "Emissions"
## and assign in new variable "NEI18"
NEI18 <- summarise(group_by(NEI17, year, fips), e = sum(Emissions)) ## "e" is the sum column name
## change our "fips" numbers to city names
NEI18$fips[NEI18$fips == "06037"] <- "Los Angeles"
NEI18$fips[NEI18$fips == "24510"] <- "Baltimore"
NEI18
?qplot
library(ggplot2)
?qplot
qplot(data = NEI18, ## our data set
facets = .~ fips,
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI18, ## our data set
facets = .~ fips,
year, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI18, ## our data set
facets = .~ fips, e,
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI18, ## our data set
facets = .~ fips, ## each city on diffrent plot
year, e, ## x and y
##color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
?qplot
qplot(data = NEI18, ## our data set
facets = .~ fips, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
NEI19 <- diff(NEI18$e)
NEI19
?qplot
qplot(data = NEI19, ## our data set
facets = (fips == "Los Angeles"), ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
?log
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line") ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line") ## plot type: lines and points together
+ labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line")) ## plot type: lines and points together
+ labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time [%]", ## y axis name
geom = c("point", "line"))
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time", ## y axis name
geom = c("point", "line")) ## plot type: lines and points together
+ labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes changes over time", ## y axis name
geom = c("point", "line"))
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI19, ## our data set
facets = fips.~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
facets = fips. ~, ## each city on a diffrent plot
year, e, ## x and y
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
year, e, ## x and y
facets = fips ~ .,
binwidth = 2, ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
year, e, ## x and y
facets = fips ~ .,
binwidth = 1, ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
year, e, ## x and y
facets = . ~ fips,
binwidth = 1, ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
year, e, ## x and y
facets = . ~ fips,## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI19, ## our data set
year, e, ## x and y
facets = .~ fips, ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI18, ## our data set
year, e, ## x and y
facets = .~ fips, ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI18, ## our data set
year, e, ## x and y
facets = fips ~., ## each city on a diffrent plot
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
qplot(data = NEI18, ## our data set
year, e, ## x and y
facets = fips ~., ## each city on a diffrent plot
binwidth = 2,
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
)
?binwidth
??binwidth
qplot(data = NEI18, ## our data set
year, e, ## x and y
facets = fips ~., ## each city on a diffrent plot
binwidth = 2,
ylab = "vehicle emissions in tonnes", ## y axis name
geom = "density", ## plot type: lines and points together
)
qplot(data = NEI18, ## our data set
year, e, ## x and y
ylab = "vehicle emissions in tonnes", ## y axis name
geom = "density", ## plot type: lines and points together
)
qplot(log(NEI18$e), data = NEI18
geom = "density",
color = fips)
qplot(log(NEI18$e), data = NEI18
geom = "density",
color = fips
)
## first we need to find "vehicle" sources in SCC table
## so using  dplyr package
library(dplyr)
## from column "EI.Sector" we need to find "vehicle"
## and assign to new variable SCC3
SCC3 <- SCC[grepl("*[Vv]ehicles", SCC$EI.Sector, ignore.case=TRUE),]
## then we need to find the SCC numbers in our SCC3 table for our primary key
## to be able to match with NEI table
## so subsseting SSC3 to SSC4
SCC4 <- unique(SCC3$SCC) ## our primary key
## from table NEI we are subsetting the columns we will need for our plot's data
## into varaible "NEI13"
NEI13 <- select(NEI, fips, SCC, Emissions, year)
## then we filter our NEI13 table on our primary key which is "SCC4"
## and leaving only records for "Baltimore City, Maryland"
## creating variable "NEI14"
NEI14 <- filter(NEI13, SCC %in% SCC4, fips == "24510")
## for our plot we need to group by "year" and sum by "Emissions"
## and assign in new variable "NEI15"
NEI15 <- summarise(group_by(NEI14, year), e = sum(Emissions)) ## "e" is the sum column name
par(mfrow =c(1, 2))
## plotting
qplot(data = NEI15, ## our data set
year, e, ## x and y
ylab = "emissions in tonnes for vehicles in Baltimore City", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 5") ## plot title
qplot(data = NEI16, ## our data set
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
par(mfrow =c(1, 2))
## plotting 1
qplot(data = NEI15, ## our data set
year, e, ## x and y
ylab = "emissions in tonnes for vehicles in Baltimore City", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 5") ## plot title
## plotting 2
qplot(data = NEI18, ## our data set
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = c("point", "line"), ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(year, data = NEI18, geom = "density", color = filps)
qplot(year, data = NEI18, geom = "density", color = NEI18$filps)
qplot(year, data = NEI18$e, geom = "density", color = NEI18$filps)
NEI18
qplot(year, data = NEI18, geom = "density", color = fips)
qplot(year, data = NEI18$e, geom = "density", color = fips)
qplot(data = NEI18, ## our data set
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = "density", ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(year, data = NEI18$e, geom = "density", color = fips)
qplot(year, data = NEI18, geom = "density", color = fips)
qplot(year, data = NEI18, geom = "density", color = NEI18$fips)
?geom
??geom
?qplot
qplot(data = NEI18, ## our data set
year, e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = "histogram", ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(data = NEI18, ## our data set
e, ## x and y
color = fips, ## define each group in "type" by colour
ylab = "vehicle emissions in tonnes", ## y axis name
geom = "histogram", ## plot type: lines and points together
) + labs(title = "Question 6") ## plot title
qplot(year, data = NEI18, fill = fips)
qplot(year, e, data = NEI18, fill = fips)
qplot(year, data = NEI18, fill = fips)
qplot(year, e, data = NEI18, geom = c("line", smooth), method = "lm", facets = .~ fips)
qplot(year, e, data = NEI18, geom = c("line", "smooth"), method = "lm", facets = .~ fips)
qplot(year, e, data = NEI18, geom = c("line", "smooth"), method = "lm", facets = fips . ~)
qplot(year, e, data = NEI18, geom = c("line", "smooth"), method = "lm", facets = fips ~.)
# Read PM2.5 Emissions Data and Source Classification Code Table
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
# Compare emissions from motor vehicle sources in Baltimore City with emissions
# from motor vehicle sources in Los Angeles County, California (fips ==
# "06037"). Which city has seen greater changes over time in motor vehicle
# emissions?
normalize <- function(x) {(x-min(x)) / (max(x)-min(x))}
# Baltimore emissions
bmore.emissions <- NEI[(NEI$fips=="24510") & (NEI$type=="ON-ROAD"),]
bmore.emissions.aggr <- aggregate(Emissions ~ year, data=bmore.emissions, FUN=sum)
# Los Angeles emissions
la.emissions <- NEI[(NEI$fips=="06037") & (NEI$type=="ON-ROAD"),]
la.emissions.aggr <- aggregate(Emissions ~ year, data=la.emissions, FUN=sum)
bmore.emissions.aggr$County <- "Baltimore City, MD"
la.emissions.aggr$County <- "Los Angeles County, CA"
both.emissions <- rbind(bmore.emissions.aggr, la.emissions.aggr)
# plot
library(ggplot2)
ggplot(both.emissions, aes(x=factor(year), y=Emissions, fill=County)) +
geom_bar(stat="identity") +
facet_grid(County  ~ ., scales="free") +
ylab("total emissions (tons)") +
xlab("year") +
ggtitle(expression("Motor vehicle emission variation\nin Baltimore and Los Angeles"))
library(grid)
library(plyr)
baltimore <- subset(NEI, fips=='24510')
fourtypes <- ddply(baltimore, .(type, year), summarize, Emissions = sum(Emissions))
qplot(year, Emissions, data = fourtypes,
color = type, geom = "line")
Number of steps taking in a 5-minute interval (missing values are coded as NA) | The date on which the measurement was taken in YYYY-MM-DD format | Identifier for the 5-minute interval in which measurement was taken
dir.create("data")
First we check if directory "data" exists
```{r, echo = TRUE}
if (!file.exists("data")) {
```
and if directory does not exist create a directory "data" in the working directory
```{r, echo = TRUE}
dir.create("data")
}
```
```echo = TRUE```
getwd()
download.file(fileUrl, destfile = "./data/download.zip")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "./data/download.zip")
### downloading data
Set URL target as variable "fileUrl"
```{r, echo = FALSE}
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
```
and then download to "data" directory as "download.zip"
```{r}
download.file(fileUrl, destfile = "./data/download.zip")
```
```{r, results=hide}
?download.file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",data, mode="wb")
unzip(data, "activity.csv")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",data, mode="w")
unzip(data, "activity.csv")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",data, mode="w")
unzip(data, "activity.zip")
?unzip
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",data, mode="w")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","./data/activity.zip", mode="wb")
unzip(data, "activity.zip")
unzip("./data/activity.zip", exdir = "./data")
getwd
getwd()
A1 <- read.csv("./data/activity.csv", header = TRUE)
unzip("./data/activity.zip", exdir = "./data")
setwd("C:\\Users\\now47892\\Documents\\data science\\5 - Reproducible Research\\week 2\\Assigment1")
unzip("./data/activity.zip", exdir = "./data")
unzip("./data/activity.zip", exdir = "./data")
?str()
### Calculate the total number of steps taken per day
A1$date <- strptime(paste(A1$datee), format = "%d/%m/%Y")
A1 <- read.csv("./data/activity.csv", header = TRUE)
A1 <- read.csv("./data/activity.csv", header = TRUE)
str(A1)
library(dplyr)
A2 <- summarise(group_by(A1, date), "steps per day" = sum(steps))
head(A2)
tail(A2)
library(dplyr)
A1 <- read.csv("./data/activity.csv", header = TRUE)
A1 <- read.csv("./data/activity.csv", header = TRUE)
str(A2)
head(A2)
?hist
```
hist(A2)
A2 <- summarise(group_by(A1, date), "steps per day" = sum(steps), rm.na = TURE)
hist(A2$StepsPerDay, breaks = 9)
breaks = 30)
,
The mean of total steps per day is 'r mean_steps'
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
toc: no
---
### --- RUNNING ENVIRONMENT ---
Windows 7 (64-bit), R version 3.1.3, RStudio version 0.98.1103
toc: changed to "no" as I do not want automatically generated table of contents.
I like ```dlpyr``` package so I will be using it here.
## ECHO - Setting Global Options
"When writing code chunks in the R markdown document, always use echo = TRUE so that someone else will be able to read the code." So every code chuck is set as:
```{r, echo = TRUE}```
## Loading and preprocessing the data
### working directory
Create a directory in your workign directory called "data".
So first we check if directory "data" exists and if directory does not exist then we create a directory "data" in the working directory
```{r, echo = TRUE}
if (!file.exists("data")) {
dir.create("data")    }
```
setwd(./data)???
### Downloading data
You can downlad the data by clicking [link to assigment file](https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip) and save it in "data" directory.
Than you need to unzip it, you can use the code below
```unzip("./data/activity.zip", exdir = "./data")```
### Reading data
we use ```read.csv()``` to read into variable "A1"" from "data" specifyingthe header as valid
```{r, echo = TRUE}
A1 <- read.csv("./data/activity.csv", header = TRUE)
```
### Data
The variables included in the assigment dataset are:
steps | date | interval
------------ | ------------- | -------------
Number of steps taking in a 5-minute interval (missing values are coded as NA) | The date on which the measurement was taken in YYYY-MM-DD format | Identifier for the 5-minute interval in which measurement was taken
To display the structure of our loaded data (A1) we run:
```{r, echo = TRUE}
str(A1)
```
## (PART ONE)
## What is mean total number of steps taken per day?
### Data cleaning
"For this part of the assignment, you can ignore the missing values in the dataset."
We alrady dealt with date as factor and converted it as date for entire dataset.
### 1. Calculate the total number of steps taken per day
Using  dplyr package
```{r, echo = TRUE, message = FALSE, warning = FALSE}
library(dplyr)
```
we need to create a new variable "A2" with sum of steps per day
```{r, echo = TRUE}
A2 <- summarise(group_by(A1, date), StepsPerDay = sum(steps), na.rm = TRUE)
```
The result is a table which we can have a sneak peak at by using
```{r, echo = TRUE}
head(A2)
```
### 2. "If you do not understand the difference between a histogram and a barplot, research the difference between them."
There are two differences:
1. one is in the type of data that is presented
2. and the other in the way they are drawn.
[read more](http://mathcentral.uregina.ca/QQ/database/QQ.09.99/raeluck1.html)
The main difference is:
- With bar charts, each column represents a group defined by a categorical variable
- and with histograms, each column represents a group defined by a quantitative variable.
So:
- With bar charts the labels on the X axis are categorical
- and with histograms, they are quantitative.
[read more](http://stattrek.com/statistics/charts/histogram.aspx?Tutorial=AP)
### 2. Make a histogram of the total number of steps taken each day
Using simple ```hist()``` we can show in frequency by 30 the number of steps
```{r, echo = TRUE}
hist(A2$StepsPerDay,
breaks = 30,
main = "Total number of steps taken each day",
xlab = "sum of steps per day",
col = "blue")
```
### 3. Calculate and report the mean and median of the total number of steps taken per day
The mean of total steps per day is:
```{r echo = TRUE}
mean(A2$StepsPerDay, na.rm = TRUE)
```
The median of total steps per day is:
```{r, echo = TRUE}
median(A2$StepsPerDay, na.rm = TRUE)
```
## (PART TWO)
## What is the average daily activity pattern?
### 1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis).
Using  dplyr package we need to create a new variable "A3" with average of steps per 5-minute interval
```{r, echo = TRUE}
A3 <- summarise(group_by(A1, interval), AvgSteps = mean(steps, na.rm = TRUE))
```
and do a line plot  ```type = "l"```
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
head(A1)
head(A2)
head(A3)
plot(A3$interval, A3$AvgSteps,
xlab = "Interval",
ylab = "Average of steps",
type = "l")
?head()
head(A1)
head(A1)
?paste()
plot(A2$StepsPerDay,
qplot(A2, xlab='Total steps', ylab='Frequency')
?qplot
?qplot()
breaks = 30,
,
geom_bar(stat = "interval")
?ggplot()
??ggplot?
??ggplot
??ggplot
?barplot
?barplot
?barplot
?plot
?prettyNum
?hist
weekdays()
?weekdays()
?str
